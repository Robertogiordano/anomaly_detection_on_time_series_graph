"""
File: preprocess_satellite_data.py

Description:
This script preprocesses a CSV file containing satellite observation data, generated by `export_xarray_csv.py`, performing data cleaning, 
date-time parsing, and reorganization of columns to prepare the dataset for analysis. The processed data 
is saved into a new CSV file.

Key Features:
- Cleans the dataset by removing rows with missing values.
- Extracts and formats date and time components into separate columns.
- Rearranges columns for better organization.
- Converts time-related columns to integer data types for consistency.
- Removes unnecessary columns to reduce file size.

Requirements:
- Python libraries: pandas, re
"""

# Import necessary libraries
import pandas as pd
import re

# Load the dataset from CSV
df = pd.read_csv('data_2013_2015.csv')

# Remove rows with missing values
df = df.dropna()

# Reset the index to maintain consistency
df = df.reset_index(drop=True)

# Extract day and time components from the 'date' column
df['day'] = pd.to_datetime(df['date'].apply(lambda x: re.sub(r'\s.*$', '', x)))  # Extract date
df['time'] = df['date'].apply(lambda x: re.sub(r'^\d{4}-\d{2}-\d{2}\s', '', x)).str.split('.').str[0]  # Extract time

# Extract year, month, and day from the 'day' column
df['year'] = df['day'].dt.year
df['month'] = df['day'].dt.month
df['day'] = df['day'].dt.day

# Extract hour, minute, and second from the 'time' column
df['hour'] = df['time'].str.split(':').str[0].astype('int32')
df['minute'] = df['time'].str.split(':').str[1].astype('int32')
df['second'] = df['time'].str.split(':').str[2].astype('int32')

# Drop the original 'date' and 'time' columns
df.drop(['date', 'time'], axis=1, inplace=True)

# Rearrange columns to place 'day' and 'hour' related columns after 'file'
cols = df.columns.tolist()
cols = cols[:1] + cols[-6:] + cols[1:-6]  # Move date-related columns after the 'file' column
df = df[cols]

# Remove specific unnecessary columns
df.drop(['air_temp_masked', 'satellite_position'], axis=1, inplace=True)

# Save the preprocessed data to a new CSV file
df.to_csv('data_preprocessed_2013_2015.csv', index=False)

print("Preprocessing completed. Data saved to 'data_preprocessed_2013_2015.csv'")
